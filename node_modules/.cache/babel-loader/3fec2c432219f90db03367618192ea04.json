{"ast":null,"code":"var _jsxFileName = \"D:\\\\PBSRandD_React\\\\PBSRandD\\\\src\\\\Components\\\\Editors\\\\AsyncValidationEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport { useDebounce } from '../../utils';\nimport './AsyncValidationEditor.css';\nexport default _c2 = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n  const [valid, setValid] = useState(true);\n  const [validating, setValidating] = useState(false);\n  const [touched, setTouched] = useState(false);\n  const debouncedInputVal = useDebounce(inputValue, 1000);\n\n  function inputHandler(e) {\n    setTouched(true);\n    setInputValue(e.target.value);\n    setValidating(true);\n  }\n\n  useEffect(() => {\n    // random time between 0 and 1000ms\n    let timeout = Math.floor(Math.random() * 1000);\n    new Promise((resolve, reject) => {\n      if (inputValue === '') {\n        resolve(false);\n      } else {\n        setTimeout(() => {\n          resolve(props.condition(inputValue));\n        }, timeout);\n      }\n    }).then(valid => {\n      setValid(valid);\n      setValidating(false);\n    }).catch(err => console.log(err));\n  }, [debouncedInputVal]);\n  useImperativeHandle(ref, () => {\n    return {\n      getValue: () => {\n        return inputValue;\n      },\n      afterGuiAttached: () => {\n        setInputValue(props.value);\n      },\n      isCancelAfterEnd: () => {\n        return !valid || validating;\n      }\n    };\n  });\n  let loadingElement = null;\n  let txtColor = null;\n\n  if (valid) {\n    txtColor = 'black';\n    loadingElement = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 26\n      }\n    }, \"\\u2714\");\n  } else {\n    txtColor = '#E91E63';\n    loadingElement = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 26\n      }\n    }, \"\\u2718\");\n  }\n\n  if (validating) {\n    txtColor = 'gray';\n    loadingElement = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 26\n      }\n    });\n  }\n\n  if (!touched) {\n    txtColor = 'black';\n    loadingElement = null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"async-validation-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"ag-input-field-input ag-text-field-input\",\n    style: {\n      color: txtColor\n    },\n    onChange: inputHandler,\n    value: inputValue,\n    placeholder: 'Enter ' + props.column.colId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), loadingElement);\n}, \"UaP2RPEYAnC9Vi51x6ai5IQBp9A=\", false, function () {\n  return [useDebounce, useImperativeHandle];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$forwardRef\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/PBSRandD_React/PBSRandD/src/Components/Editors/AsyncValidationEditor.jsx"],"names":["React","useState","useEffect","forwardRef","useImperativeHandle","useDebounce","props","ref","inputValue","setInputValue","valid","setValid","validating","setValidating","touched","setTouched","debouncedInputVal","inputHandler","e","target","value","timeout","Math","floor","random","Promise","resolve","reject","setTimeout","condition","then","catch","err","console","log","getValue","afterGuiAttached","isCancelAfterEnd","loadingElement","txtColor","color","column","colId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport { useDebounce } from '../../utils';\nimport './AsyncValidationEditor.css';\n\nexport default forwardRef((props, ref) => {\n    const [inputValue, setInputValue] = useState('');\n    const [valid, setValid] = useState(true);\n    const [validating, setValidating] = useState(false);\n    const [touched, setTouched] = useState(false);\n\n    const debouncedInputVal = useDebounce(inputValue, 1000);\n\n    function inputHandler(e) {\n        setTouched(true);\n        setInputValue(e.target.value);\n        setValidating(true);\n    }\n\n    useEffect(() => {\n        // random time between 0 and 1000ms\n        let timeout = Math.floor(Math.random() * 1000);\n\n        new Promise((resolve, reject) => {\n            if (inputValue === '') {\n                resolve(false);\n            } else {\n                setTimeout(() => {\n                    resolve(props.condition(inputValue));\n                }, timeout);\n            }\n        })\n            .then(valid => {\n                setValid(valid);\n                setValidating(false)\n            })\n            .catch(err => console.log(err));\n    }, [debouncedInputVal]);\n\n    useImperativeHandle(ref, () => {\n        return {\n            getValue: () => {\n                return inputValue;\n            },\n            afterGuiAttached: () => {\n                setInputValue(props.value);\n            },\n            isCancelAfterEnd: () => {\n                return !valid || validating;\n            },\n        };\n    });\n\n    let loadingElement = null;\n    let txtColor = null;\n\n    if (valid) {\n        txtColor = 'black'\n        loadingElement = <span className=\"success\">✔</span>\n    } else {\n        txtColor = '#E91E63';\n        loadingElement = <span className=\"fail\">✘</span>\n    }\n\n    if (validating) {\n        txtColor = 'gray';\n        loadingElement = <span className=\"loading\"></span>\n    }\n\n    if (!touched) {\n        txtColor = 'black';\n        loadingElement = null;\n    }\n\n    return (\n        <div className=\"async-validation-container\">\n            <input\n                type=\"text\"\n                className=\"ag-input-field-input ag-text-field-input\"\n                style={{ color: txtColor }}\n                onChange={inputHandler}\n                value={inputValue}\n                placeholder={'Enter ' + props.column.colId}\n            />\n            {loadingElement}\n        </div>\n    )\n})\n"]},"metadata":{},"sourceType":"module"}