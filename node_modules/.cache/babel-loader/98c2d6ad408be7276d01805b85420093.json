{"ast":null,"code":"var _jsxFileName = \"D:\\\\PBSRandD_React\\\\PBSRandD\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-enterprise\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport { columnDefs, defaultColDef } from \"./columns\";\nimport GridComponents from \"./Components\";\nimport { uuid } from \"uuidv4\";\nimport \"./App.css\";\n\nfunction App() {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [columnApi, setColumnApi] = useState(null);\n  const [rowData, setRowData] = useState(null);\n  const frameworkComponents = {\n    simpleEditor: GridComponents.SimpleEditor,\n    asyncValidationEditor: GridComponents.AsyncValidationEditor,\n    autoCompleteEditor: GridComponents.AutoCompleteEditor,\n    agDateInput: GridComponents.MyDatePicker,\n    dateEditor: GridComponents.DateEditor,\n    actionsRenderer: GridComponents.ActionsRenderer,\n    addRowStatusBar: GridComponents.AddRowStatusBar\n  };\n\n  function onGridReady(params) {\n    setGridApi(params.api);\n    setColumnApi(params.columnApi);\n    fetch(\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/packages/ag-grid-docs/src/olympicWinnersSmall.json\").then(res => res.json()).then(data => {\n      data.forEach(row => row.id = uuid());\n      setRowData(data.slice(0, 100));\n    });\n    params.api.sizeColumnsToFit();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"myGrid\",\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    className: \"ag-theme-alpine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AgGridReact, {\n    columnDefs: columnDefs,\n    defaultColDef: defaultColDef,\n    rowData: rowData,\n    getRowNodeId: data => data.id,\n    onGridReady: onGridReady,\n    frameworkComponents: frameworkComponents,\n    editType: \"fullRow\",\n    suppressClickEdit: true,\n    statusBar: {\n      statusPanels: [{\n        statusPanel: \"addRowStatusBar\"\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(App, \"+XaV/8HDqBjM/Vlw9Llwt6uYSjI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/PBSRandD_React/PBSRandD/src/App.js"],"names":["React","useState","AgGridReact","columnDefs","defaultColDef","GridComponents","uuid","App","gridApi","setGridApi","columnApi","setColumnApi","rowData","setRowData","frameworkComponents","simpleEditor","SimpleEditor","asyncValidationEditor","AsyncValidationEditor","autoCompleteEditor","AutoCompleteEditor","agDateInput","MyDatePicker","dateEditor","DateEditor","actionsRenderer","ActionsRenderer","addRowStatusBar","AddRowStatusBar","onGridReady","params","api","fetch","then","res","json","data","forEach","row","id","slice","sizeColumnsToFit","height","width","statusPanels","statusPanel"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,oBAAP;AACA,OAAO,2CAAP;AACA,OAAO,mDAAP;AAEA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,WAA1C;AACA,OAAOC,cAAP,MAA2B,cAA3B;AAEA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAMa,mBAAmB,GAAG;AAC1BC,IAAAA,YAAY,EAAEV,cAAc,CAACW,YADH;AAE1BC,IAAAA,qBAAqB,EAAEZ,cAAc,CAACa,qBAFZ;AAG1BC,IAAAA,kBAAkB,EAAEd,cAAc,CAACe,kBAHT;AAI1BC,IAAAA,WAAW,EAAEhB,cAAc,CAACiB,YAJF;AAK1BC,IAAAA,UAAU,EAAElB,cAAc,CAACmB,UALD;AAM1BC,IAAAA,eAAe,EAAEpB,cAAc,CAACqB,eANN;AAO1BC,IAAAA,eAAe,EAAEtB,cAAc,CAACuB;AAPN,GAA5B;;AAUA,WAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3BrB,IAAAA,UAAU,CAACqB,MAAM,CAACC,GAAR,CAAV;AACApB,IAAAA,YAAY,CAACmB,MAAM,CAACpB,SAAR,CAAZ;AAEAsB,IAAAA,KAAK,CACH,6GADG,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHf,EAIGF,IAJH,CAIQG,IAAI,IAAI;AACZA,MAAAA,IAAI,CAACC,OAAL,CAAaC,GAAG,IAAKA,GAAG,CAACC,EAAJ,GAASjC,IAAI,EAAlC;AACAO,MAAAA,UAAU,CAACuB,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,GAAd,CAAD,CAAV;AACD,KAPH;AAQAV,IAAAA,MAAM,CAACC,GAAP,CAAWU,gBAAX;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAC,QADL;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAFT;AAGE,IAAA,SAAS,EAAC,iBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,WAAD;AACE,IAAA,UAAU,EAAExC,UADd;AAEE,IAAA,aAAa,EAAEC,aAFjB;AAGE,IAAA,OAAO,EAAEQ,OAHX;AAIE,IAAA,YAAY,EAAEwB,IAAI,IAAIA,IAAI,CAACG,EAJ7B;AAKE,IAAA,WAAW,EAAEV,WALf;AAME,IAAA,mBAAmB,EAAEf,mBANvB;AAOE,IAAA,QAAQ,EAAC,SAPX;AAQE,IAAA,iBAAiB,MARnB;AASE,IAAA,SAAS,EAAE;AACT8B,MAAAA,YAAY,EAAE,CAAC;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAD;AADL,KATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAuBD;;GAtDQtC,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-enterprise\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n\nimport { columnDefs, defaultColDef } from \"./columns\";\nimport GridComponents from \"./Components\";\n\nimport { uuid } from \"uuidv4\";\nimport \"./App.css\";\n\nfunction App() {\n  const [gridApi, setGridApi] = useState(null);\n  const [columnApi, setColumnApi] = useState(null);\n\n  const [rowData, setRowData] = useState(null);\n\n  const frameworkComponents = {\n    simpleEditor: GridComponents.SimpleEditor,\n    asyncValidationEditor: GridComponents.AsyncValidationEditor,\n    autoCompleteEditor: GridComponents.AutoCompleteEditor,\n    agDateInput: GridComponents.MyDatePicker,\n    dateEditor: GridComponents.DateEditor,\n    actionsRenderer: GridComponents.ActionsRenderer,\n    addRowStatusBar: GridComponents.AddRowStatusBar\n  };\n\n  function onGridReady(params) {\n    setGridApi(params.api);\n    setColumnApi(params.columnApi);\n\n    fetch(\n      \"https://raw.githubusercontent.com/ag-grid/ag-grid/master/packages/ag-grid-docs/src/olympicWinnersSmall.json\"\n    )\n      .then(res => res.json())\n      .then(data => {\n        data.forEach(row => (row.id = uuid()));\n        setRowData(data.slice(0, 100));\n      });\n    params.api.sizeColumnsToFit();\n  }\n\n  return (\n    <div className=\"my-app\">\n      <div\n        id=\"myGrid\"\n        style={{ height: \"100%\", width: \"100%\" }}\n        className=\"ag-theme-alpine\"\n      >\n        <AgGridReact\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          rowData={rowData}\n          getRowNodeId={data => data.id}\n          onGridReady={onGridReady}\n          frameworkComponents={frameworkComponents}\n          editType=\"fullRow\"\n          suppressClickEdit\n          statusBar={{\n            statusPanels: [{ statusPanel: \"addRowStatusBar\" }]\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}