{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-hooks-complex-editor-master\\\\src\\\\Components\\\\StatusBar\\\\AddRowStatusBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { uuid } from \"uuidv4\";\nimport \"./AddRowStatusBar.css\";\nexport default _s(props => {\n  _s();\n\n  let [editing, setEditing] = useState(false);\n  useEffect(() => {\n    props.api.addEventListener(\"rowEditingStarted\", onRowEditingStarted);\n    props.api.addEventListener(\"rowEditingStopped\", onRowEditingStopped);\n    return () => {\n      props.api.removeEventListener(\"rowEditingStarted\", onRowEditingStarted);\n      props.api.removeEventListener(\"rowEditingStopped\", onRowEditingStopped);\n    };\n  }, []);\n\n  function onRowEditingStarted() {\n    setEditing(true);\n  }\n\n  function onRowEditingStopped() {\n    setEditing(false);\n  }\n\n  function addRow() {\n    let id = uuid();\n    let emptyRow = {\n      id\n    };\n    props.api.updateRowData({\n      add: [emptyRow]\n    });\n    let node = props.api.getRowNode(id);\n    props.api.ensureIndexVisible(node.rowIndex);\n    setTimeout(() => {\n      props.api.startEditingCell({\n        rowIndex: node.rowIndex,\n        colKey: props.columnApi.getAllColumns()[0].colId\n      });\n    }, 300);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"add-btn-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    variant: editing ? \"outlined\" : \"contained\",\n    color: \"primary\",\n    onClick: addRow,\n    disabled: editing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Add Row\"));\n}, \"4da9QhRSPGznlVTnx8cpe7ty4OM=\");","map":{"version":3,"sources":["D:/react-hooks-complex-editor-master/src/Components/StatusBar/AddRowStatusBar.jsx"],"names":["React","useState","useEffect","uuid","props","editing","setEditing","api","addEventListener","onRowEditingStarted","onRowEditingStopped","removeEventListener","addRow","id","emptyRow","updateRowData","add","node","getRowNode","ensureIndexVisible","rowIndex","setTimeout","startEditingCell","colKey","columnApi","getAllColumns","colId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,uBAAP;AAEA,kBAAeC,KAAK,IAAI;AAAA;;AACtB,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,KAAK,CAACG,GAAN,CAAUC,gBAAV,CAA2B,mBAA3B,EAAgDC,mBAAhD;AACAL,IAAAA,KAAK,CAACG,GAAN,CAAUC,gBAAV,CAA2B,mBAA3B,EAAgDE,mBAAhD;AAEA,WAAO,MAAM;AACXN,MAAAA,KAAK,CAACG,GAAN,CAAUI,mBAAV,CAA8B,mBAA9B,EAAmDF,mBAAnD;AACAL,MAAAA,KAAK,CAACG,GAAN,CAAUI,mBAAV,CAA8B,mBAA9B,EAAmDD,mBAAnD;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT;;AAUA,WAASD,mBAAT,GAA+B;AAC7BH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AAED,WAASI,mBAAT,GAA+B;AAC7BJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAED,WAASM,MAAT,GAAkB;AAChB,QAAIC,EAAE,GAAGV,IAAI,EAAb;AACA,QAAIW,QAAQ,GAAG;AAAED,MAAAA;AAAF,KAAf;AACAT,IAAAA,KAAK,CAACG,GAAN,CAAUQ,aAAV,CAAwB;AAAEC,MAAAA,GAAG,EAAE,CAACF,QAAD;AAAP,KAAxB;AACA,QAAIG,IAAI,GAAGb,KAAK,CAACG,GAAN,CAAUW,UAAV,CAAqBL,EAArB,CAAX;AACAT,IAAAA,KAAK,CAACG,GAAN,CAAUY,kBAAV,CAA6BF,IAAI,CAACG,QAAlC;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACfjB,MAAAA,KAAK,CAACG,GAAN,CAAUe,gBAAV,CAA2B;AACzBF,QAAAA,QAAQ,EAAEH,IAAI,CAACG,QADU;AAEzBG,QAAAA,MAAM,EAAEnB,KAAK,CAACoB,SAAN,CAAgBC,aAAhB,GAAgC,CAAhC,EAAmCC;AAFlB,OAA3B;AAID,KALS,EAKP,GALO,CAAV;AAMD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,OAAO,EAAErB,OAAO,GAAG,UAAH,GAAgB,WADlC;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAEO,MAHX;AAIE,IAAA,QAAQ,EAAEP,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF;AAYD,CAhDD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { uuid } from \"uuidv4\";\n\nimport \"./AddRowStatusBar.css\";\n\nexport default props => {\n  let [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    props.api.addEventListener(\"rowEditingStarted\", onRowEditingStarted);\n    props.api.addEventListener(\"rowEditingStopped\", onRowEditingStopped);\n\n    return () => {\n      props.api.removeEventListener(\"rowEditingStarted\", onRowEditingStarted);\n      props.api.removeEventListener(\"rowEditingStopped\", onRowEditingStopped);\n    };\n  }, []);\n\n  function onRowEditingStarted() {\n    setEditing(true);\n  }\n\n  function onRowEditingStopped() {\n    setEditing(false);\n  }\n\n  function addRow() {\n    let id = uuid();\n    let emptyRow = { id };\n    props.api.updateRowData({ add: [emptyRow] });\n    let node = props.api.getRowNode(id);\n    props.api.ensureIndexVisible(node.rowIndex);\n\n    setTimeout(() => {\n      props.api.startEditingCell({\n        rowIndex: node.rowIndex,\n        colKey: props.columnApi.getAllColumns()[0].colId\n      });\n    }, 300);\n  }\n\n  return (\n    <div className=\"add-btn-container\">\n      <button\n        variant={editing ? \"outlined\" : \"contained\"}\n        color=\"primary\"\n        onClick={addRow}\n        disabled={editing}\n      >\n        Add Row\n      </button>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}