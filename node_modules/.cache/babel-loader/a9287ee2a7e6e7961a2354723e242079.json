{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-hooks-complex-editor-master\\\\src\\\\Components\\\\Renderers\\\\ActionsRenderer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useComponentWillMount } from '../../utils';\nexport default _s(props => {\n  _s();\n\n  let [editing, setEditing] = useState(false);\n  let [disabled, setDisabled] = useState(false); // custom hook\n\n  useComponentWillMount(() => {\n    let editingCells = props.api.getEditingCells();\n\n    if (editingCells.length !== 0) {\n      setDisabled(true);\n    }\n  });\n  useEffect(() => {\n    props.api.addEventListener('rowEditingStarted', onRowEditingStarted);\n    props.api.addEventListener('rowEditingStopped', onRowEditingStopped);\n    return () => {\n      props.api.removeEventListener('rowEditingStarted', onRowEditingStarted);\n      props.api.removeEventListener('rowEditingStopped', onRowEditingStopped);\n    };\n  }, []);\n\n  function onRowEditingStarted(params) {\n    if (props.node === params.node) {\n      setEditing(true);\n    } else {\n      setDisabled(true);\n    }\n  }\n\n  ;\n\n  function onRowEditingStopped(params) {\n    if (props.node === params.node) {\n      if (isEmptyRow(params.data)) {\n        deleteRow(true);\n      } else {\n        setEditing(false);\n      }\n    } else {\n      setDisabled(false);\n    }\n  }\n\n  function startEditing() {\n    props.api.startEditingCell({\n      rowIndex: props.rowIndex,\n      colKey: props.column.colId\n    });\n  }\n\n  function stopEditing(bool) {\n    props.api.stopEditing(bool);\n  }\n\n  function deleteRow(force = false) {\n    let data = props.data;\n    let confirm = true;\n\n    if (!force) {\n      confirm = window.confirm(`are you sure you want to delete this row: ${JSON.stringify(data)})`);\n    }\n\n    if (confirm) {\n      props.api.updateRowData({\n        remove: [data]\n      });\n      props.api.refreshCells({\n        force: true\n      });\n    }\n  }\n\n  ;\n\n  function isEmptyRow(data) {\n    let dataCopy = { ...data\n    };\n    delete dataCopy.id;\n    return !Object.values(dataCopy).some(value => value);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, editing ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: () => stopEditing(false),\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(\"button\", {\n    color: \"secondary\",\n    variant: \"contained\",\n    onClick: () => stopEditing(true),\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, \"Cancel\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: startEditing,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Edit\"), /*#__PURE__*/React.createElement(\"button\", {\n    color: \"secondary\",\n    variant: \"outlined\",\n    onClick: () => deleteRow(),\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, \"Delete\")));\n}, \"aVQPDPsbVWHjMMoXDU8Sbe3exmQ=\", false, function () {\n  return [useComponentWillMount];\n});","map":{"version":3,"sources":["D:/react-hooks-complex-editor-master/src/Components/Renderers/ActionsRenderer.jsx"],"names":["React","useState","useEffect","useComponentWillMount","props","editing","setEditing","disabled","setDisabled","editingCells","api","getEditingCells","length","addEventListener","onRowEditingStarted","onRowEditingStopped","removeEventListener","params","node","isEmptyRow","data","deleteRow","startEditing","startEditingCell","rowIndex","colKey","column","colId","stopEditing","bool","force","confirm","window","JSON","stringify","updateRowData","remove","refreshCells","dataCopy","id","Object","values","some","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useComponentWillMount } from '../../utils';\n\nexport default (props) => {\n    let [editing, setEditing] = useState(false);\n    let [disabled, setDisabled] = useState(false);\n\n    // custom hook\n    useComponentWillMount(() => {\n        let editingCells = props.api.getEditingCells();\n        if (editingCells.length !== 0) {\n            setDisabled(true);\n        }\n    })\n\n    useEffect(() => {\n        props.api.addEventListener('rowEditingStarted', onRowEditingStarted);\n        props.api.addEventListener('rowEditingStopped', onRowEditingStopped);\n\n        return () => {\n            props.api.removeEventListener('rowEditingStarted', onRowEditingStarted);\n            props.api.removeEventListener('rowEditingStopped', onRowEditingStopped);\n        };\n    }, []);\n\n    function onRowEditingStarted(params) {\n        if (props.node === params.node) {\n            setEditing(true);\n        } else {\n            setDisabled(true);\n        }\n    };\n\n    function onRowEditingStopped(params) {\n        if (props.node === params.node) {\n            if (isEmptyRow(params.data)) {\n                deleteRow(true);\n            } else {\n                setEditing(false);\n            }\n        } else {\n            setDisabled(false);\n        }\n    }\n\n    function startEditing() {\n        props.api.startEditingCell({\n            rowIndex: props.rowIndex,\n            colKey: props.column.colId\n        });\n    }\n\n    function stopEditing(bool) {\n        props.api.stopEditing(bool);\n    }\n\n    function deleteRow(force = false) {\n        let data = props.data;\n        let confirm = true;\n        if (!force) {\n            confirm = window.confirm(`are you sure you want to delete this row: ${JSON.stringify(data)})`)\n        }\n        if (confirm) {\n            props.api.updateRowData({ remove: [data] });\n            props.api.refreshCells({ force: true });\n        }\n    };\n\n    function isEmptyRow(data) {\n        let dataCopy = { ...data };\n        delete dataCopy.id;\n        return !Object.values(dataCopy).some(value => value);\n    }\n\n    return (\n        <div>\n            {editing\n                ? <>\n                    <button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => stopEditing(false)}\n                        disabled={disabled}>Update</button>\n                    <button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() => stopEditing(true)}\n                        disabled={disabled}>Cancel</button>\n                </>\n                : <>\n                    <button\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        onClick={startEditing}\n                        disabled={disabled}>Edit</button>\n                    <button\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        onClick={() => deleteRow()}\n                        disabled={disabled}>Delete</button>\n                </>\n            }\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}